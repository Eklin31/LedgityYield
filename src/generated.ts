// Generated by @wagmi/cli@1.3.0 on 6/26/2023 at 11:58:04 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blacklist
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const blacklistABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'blacklist',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isBlacklisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'unBlacklist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

export const blacklistAddress = {
  31337: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
} as const

export const blacklistConfig = { address: blacklistAddress, abi: blacklistABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GenericStableToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const genericStableTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals_', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LTYStaking
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ltyStakingABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'acceptOwnership', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'invested',
    outputs: [{ name: '', internalType: 'contract IERC20Upgradeable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tierIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isEligibleTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'recoverERC20',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'recoverLTY', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'rewardsOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'aprUD3', internalType: 'uint16', type: 'uint16' }],
    name: 'setAPR',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_contract', internalType: 'address', type: 'address' }],
    name: 'setBlacklist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenAddress', internalType: 'address', type: 'address' }],
    name: 'setInvested',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tierIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'amountUD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTier',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'stake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'stakeOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tiers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalStaked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'unstake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

export const ltyStakingAddress = {
  31337: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
} as const

export const ltyStakingConfig = { address: ltyStakingAddress, abi: ltyStakingABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'addedQueuedWithdrawalRequest',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: false },
      { name: 'balance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'balanceMutation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'cancelledQueuedWithdrawalRequest',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'indexes', internalType: 'uint256[]', type: 'uint256[]', indexed: false }],
    name: 'proceededQueuedWithdrawalRequests',
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'acceptOwnership', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'requestIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'batchQueuedWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
    name: 'bigQueuedWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancelWithdrawalRequest',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claimFees', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'fundContract',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getExpectedRetained',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'underlyingToken', internalType: 'contract IERC20Upgradeable', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'instantWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'invested',
    outputs: [{ name: '', internalType: 'contract IERC20Upgradeable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'realBalanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'recoverERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recoverUnderlying',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'requestWithdrawal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'aprUD3', internalType: 'uint16', type: 'uint16' }],
    name: 'setAPR',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_contract', internalType: 'address', type: 'address' }],
    name: 'setBlacklist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_feesRateUD3', internalType: 'uint256', type: 'uint256' }],
    name: 'setFeesRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fund', internalType: 'address payable', type: 'address' }],
    name: 'setFund',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_contract', internalType: 'address', type: 'address' }],
    name: 'setLTYStaking',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_retentionRateUD3', internalType: 'uint256', type: 'uint256' }],
    name: 'setRetentionRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_withdrawer', internalType: 'address payable', type: 'address' }],
    name: 'setWithdrawer',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'underlying',
    outputs: [{ name: '', internalType: 'contract IERC20Upgradeable', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const lTokenAddress = {
  31337: '0x5FC8d32690cc91D4c39d9d3abcBD16989F875707',
} as const

export const lTokenConfig = { address: lTokenAddress, abi: lTokenABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** Wraps **{@link useContractRead}** with `abi` set to **{@link blacklistABI}**. */
export function useBlacklistRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof blacklistABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractRead({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"isBlacklisted"`.
 */
export function useBlacklistIsBlacklisted<
  TFunctionName extends 'isBlacklisted',
  TSelectData = ReadContractResult<typeof blacklistABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractRead({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'isBlacklisted',
    ...config,
  } as UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"owner"`.
 */
export function useBlacklistOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof blacklistABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractRead({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"proxiableUUID"`.
 */
export function useBlacklistProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof blacklistABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractRead({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof blacklistABI, TFunctionName, TSelectData>)
}

/** Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}**. */
export function useBlacklistWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof blacklistABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, TFunctionName, TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"blacklist"`.
 */
export function useBlacklistBlacklist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'blacklist'>['request']['abi'],
        'blacklist',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'blacklist' }
    : UseContractWriteConfig<typeof blacklistABI, 'blacklist', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'blacklist'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'blacklist', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'blacklist',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"initialize"`.
 */
export function useBlacklistInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof blacklistABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'initialize', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"renounceOwnership"`.
 */
export function useBlacklistRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof blacklistABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'renounceOwnership', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"transferOwnership"`.
 */
export function useBlacklistTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof blacklistABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'transferOwnership', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"unBlacklist"`.
 */
export function useBlacklistUnBlacklist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'unBlacklist'>['request']['abi'],
        'unBlacklist',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unBlacklist' }
    : UseContractWriteConfig<typeof blacklistABI, 'unBlacklist', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unBlacklist'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'unBlacklist', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'unBlacklist',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"upgradeTo"`.
 */
export function useBlacklistUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof blacklistABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'upgradeTo', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName` set to
 * `"upgradeToAndCall"`.
 */
export function useBlacklistUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof blacklistAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blacklistABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof blacklistABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof blacklistABI, 'upgradeToAndCall', TMode>({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/** Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}**. */
export function usePrepareBlacklistWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof blacklistABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof blacklistAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, TFunctionName>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"blacklist"`.
 */
export function usePrepareBlacklistBlacklist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'blacklist'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'blacklist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'blacklist'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"initialize"`.
 */
export function usePrepareBlacklistInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'initialize'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"renounceOwnership"`.
 */
export function usePrepareBlacklistRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'renounceOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"transferOwnership"`.
 */
export function usePrepareBlacklistTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'transferOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"unBlacklist"`.
 */
export function usePrepareBlacklistUnBlacklist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'unBlacklist'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'unBlacklist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'unBlacklist'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"upgradeTo"`.
 */
export function usePrepareBlacklistUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'upgradeTo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'upgradeTo'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link blacklistABI}** and `functionName`
 * set to `"upgradeToAndCall"`.
 */
export function usePrepareBlacklistUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blacklistABI, 'upgradeToAndCall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blacklistABI, 'upgradeToAndCall'>)
}

/** Wraps **{@link useContractEvent}** with `abi` set to **{@link blacklistABI}**. */
export function useBlacklistEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof blacklistABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof blacklistAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof blacklistABI, TEventName>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link blacklistABI}** and `eventName` set to
 * `"AdminChanged"`.
 */
export function useBlacklistAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof blacklistABI, 'AdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractEvent({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof blacklistABI, 'AdminChanged'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link blacklistABI}** and `eventName` set to
 * `"BeaconUpgraded"`.
 */
export function useBlacklistBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof blacklistABI, 'BeaconUpgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractEvent({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof blacklistABI, 'BeaconUpgraded'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link blacklistABI}** and `eventName` set to
 * `"Initialized"`.
 */
export function useBlacklistInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof blacklistABI, 'Initialized'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractEvent({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof blacklistABI, 'Initialized'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link blacklistABI}** and `eventName` set to
 * `"OwnershipTransferred"`.
 */
export function useBlacklistOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof blacklistABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractEvent({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof blacklistABI, 'OwnershipTransferred'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link blacklistABI}** and `eventName` set to
 * `"Upgraded"`.
 */
export function useBlacklistUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof blacklistABI, 'Upgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof blacklistAddress } = {} as any,
) {
  return useContractEvent({
    abi: blacklistABI,
    address: blacklistAddress[31337],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof blacklistABI, 'Upgraded'>)
}

/** Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}**. */
export function useGenericStableTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: genericStableTokenABI, ...config } as UseContractReadConfig<
    typeof genericStableTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}** and `functionName`
 * set to `"allowance"`.
 */
export function useGenericStableTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: genericStableTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}** and `functionName`
 * set to `"balanceOf"`.
 */
export function useGenericStableTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: genericStableTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}** and `functionName`
 * set to `"decimals"`.
 */
export function useGenericStableTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: genericStableTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}** and `functionName`
 * set to `"name"`.
 */
export function useGenericStableTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: genericStableTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}** and `functionName`
 * set to `"symbol"`.
 */
export function useGenericStableTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: genericStableTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link genericStableTokenABI}** and `functionName`
 * set to `"totalSupply"`.
 */
export function useGenericStableTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof genericStableTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: genericStableTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof genericStableTokenABI, TFunctionName, TSelectData>)
}

/** Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}**. */
export function useGenericStableTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof genericStableTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, TFunctionName, TMode>({
    abi: genericStableTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"approve"`.
 */
export function useGenericStableTokenApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof genericStableTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, 'approve', TMode>({
    abi: genericStableTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"decreaseAllowance"`.
 */
export function useGenericStableTokenDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof genericStableTokenABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, 'decreaseAllowance', TMode>({
    abi: genericStableTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"increaseAllowance"`.
 */
export function useGenericStableTokenIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof genericStableTokenABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, 'increaseAllowance', TMode>({
    abi: genericStableTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"mint"`.
 */
export function useGenericStableTokenMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof genericStableTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, 'mint', TMode>({
    abi: genericStableTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"transfer"`.
 */
export function useGenericStableTokenTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof genericStableTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, 'transfer', TMode>({
    abi: genericStableTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"transferFrom"`.
 */
export function useGenericStableTokenTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof genericStableTokenABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof genericStableTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof genericStableTokenABI, 'transferFrom', TMode>({
    abi: genericStableTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/** Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}**. */
export function usePrepareGenericStableTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, TFunctionName>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"approve"`.
 */
export function usePrepareGenericStableTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'approve'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareGenericStableTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareGenericStableTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"mint"`.
 */
export function usePrepareGenericStableTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'mint'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"transfer"`.
 */
export function usePrepareGenericStableTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'transfer'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link genericStableTokenABI}** and
 * `functionName` set to `"transferFrom"`.
 */
export function usePrepareGenericStableTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: genericStableTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof genericStableTokenABI, 'transferFrom'>)
}

/** Wraps **{@link useContractEvent}** with `abi` set to **{@link genericStableTokenABI}**. */
export function useGenericStableTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof genericStableTokenABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: genericStableTokenABI, ...config } as UseContractEventConfig<
    typeof genericStableTokenABI,
    TEventName
  >)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link genericStableTokenABI}** and `eventName`
 * set to `"Approval"`.
 */
export function useGenericStableTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof genericStableTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: genericStableTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof genericStableTokenABI, 'Approval'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link genericStableTokenABI}** and `eventName`
 * set to `"Transfer"`.
 */
export function useGenericStableTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof genericStableTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: genericStableTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof genericStableTokenABI, 'Transfer'>)
}

/** Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}**. */
export function useLtyStakingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"invested"`.
 */
export function useLtyStakingInvested<
  TFunctionName extends 'invested',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'invested',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"isEligibleTo"`.
 */
export function useLtyStakingIsEligibleTo<
  TFunctionName extends 'isEligibleTo',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'isEligibleTo',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"owner"`.
 */
export function useLtyStakingOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"paused"`.
 */
export function useLtyStakingPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"pendingOwner"`.
 */
export function useLtyStakingPendingOwner<
  TFunctionName extends 'pendingOwner',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"proxiableUUID"`.
 */
export function useLtyStakingProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"rewardsOf"`.
 */
export function useLtyStakingRewardsOf<
  TFunctionName extends 'rewardsOf',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'rewardsOf',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"stakeOf"`.
 */
export function useLtyStakingStakeOf<
  TFunctionName extends 'stakeOf',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'stakeOf',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"tiers"`.
 */
export function useLtyStakingTiers<
  TFunctionName extends 'tiers',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'tiers',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"totalStaked"`.
 */
export function useLtyStakingTotalStaked<
  TFunctionName extends 'totalStaked',
  TSelectData = ReadContractResult<typeof ltyStakingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractRead({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'totalStaked',
    ...config,
  } as UseContractReadConfig<typeof ltyStakingABI, TFunctionName, TSelectData>)
}

/** Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}**. */
export function useLtyStakingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof ltyStakingABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, TFunctionName, TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"acceptOwnership"`.
 */
export function useLtyStakingAcceptOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'acceptOwnership'>['request']['abi'],
        'acceptOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'acceptOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'acceptOwnership', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"initialize"`.
 */
export function useLtyStakingInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'initialize', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"pause"`.
 */
export function useLtyStakingPause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pause' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'pause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'pause', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"recoverERC20"`.
 */
export function useLtyStakingRecoverErc20<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'recoverERC20'>['request']['abi'],
        'recoverERC20',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'recoverERC20' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'recoverERC20', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recoverERC20'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'recoverERC20', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'recoverERC20',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"recoverLTY"`.
 */
export function useLtyStakingRecoverLty<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'recoverLTY'>['request']['abi'],
        'recoverLTY',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'recoverLTY' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'recoverLTY', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recoverLTY'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'recoverLTY', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'recoverLTY',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"renounceOwnership"`.
 */
export function useLtyStakingRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'renounceOwnership', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"setAPR"`.
 */
export function useLtyStakingSetApr<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'setAPR'>['request']['abi'],
        'setAPR',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAPR' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'setAPR', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAPR'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'setAPR', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setAPR',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"setBlacklist"`.
 */
export function useLtyStakingSetBlacklist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'setBlacklist'>['request']['abi'],
        'setBlacklist',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setBlacklist' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'setBlacklist', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setBlacklist'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'setBlacklist', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setBlacklist',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"setInvested"`.
 */
export function useLtyStakingSetInvested<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'setInvested'>['request']['abi'],
        'setInvested',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setInvested' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'setInvested', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setInvested'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'setInvested', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setInvested',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"setTier"`.
 */
export function useLtyStakingSetTier<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'setTier'>['request']['abi'],
        'setTier',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setTier' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'setTier', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTier'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'setTier', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setTier',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"stake"`.
 */
export function useLtyStakingStake<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'stake'>['request']['abi'],
        'stake',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'stake' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'stake', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'stake'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'stake', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'stake',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"transferOwnership"`.
 */
export function useLtyStakingTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'transferOwnership', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"unpause"`.
 */
export function useLtyStakingUnpause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unpause' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'unpause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'unpause', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"unstake"`.
 */
export function useLtyStakingUnstake<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'unstake'>['request']['abi'],
        'unstake',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unstake' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'unstake', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unstake'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'unstake', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'unstake',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"upgradeTo"`.
 */
export function useLtyStakingUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'upgradeTo', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName` set to
 * `"upgradeToAndCall"`.
 */
export function useLtyStakingUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ltyStakingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ltyStakingABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof ltyStakingABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof ltyStakingABI, 'upgradeToAndCall', TMode>({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/** Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}**. */
export function usePrepareLtyStakingWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ltyStakingABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof ltyStakingAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, TFunctionName>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"acceptOwnership"`.
 */
export function usePrepareLtyStakingAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'acceptOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'acceptOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"initialize"`.
 */
export function usePrepareLtyStakingInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'initialize'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"pause"`.
 */
export function usePrepareLtyStakingPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'pause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'pause'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"recoverERC20"`.
 */
export function usePrepareLtyStakingRecoverErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'recoverERC20'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'recoverERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'recoverERC20'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"recoverLTY"`.
 */
export function usePrepareLtyStakingRecoverLty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'recoverLTY'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'recoverLTY',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'recoverLTY'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"renounceOwnership"`.
 */
export function usePrepareLtyStakingRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'renounceOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"setAPR"`.
 */
export function usePrepareLtyStakingSetApr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setAPR'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setAPR',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setAPR'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"setBlacklist"`.
 */
export function usePrepareLtyStakingSetBlacklist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setBlacklist'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setBlacklist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setBlacklist'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"setInvested"`.
 */
export function usePrepareLtyStakingSetInvested(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setInvested'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setInvested',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setInvested'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"setTier"`.
 */
export function usePrepareLtyStakingSetTier(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setTier'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'setTier',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'setTier'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"stake"`.
 */
export function usePrepareLtyStakingStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'stake'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'stake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'stake'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"transferOwnership"`.
 */
export function usePrepareLtyStakingTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'transferOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"unpause"`.
 */
export function usePrepareLtyStakingUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'unpause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'unpause'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"unstake"`.
 */
export function usePrepareLtyStakingUnstake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'unstake'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'unstake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'unstake'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"upgradeTo"`.
 */
export function usePrepareLtyStakingUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'upgradeTo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'upgradeTo'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link ltyStakingABI}** and `functionName`
 * set to `"upgradeToAndCall"`.
 */
export function usePrepareLtyStakingUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ltyStakingABI, 'upgradeToAndCall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ltyStakingABI, 'upgradeToAndCall'>)
}

/** Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}**. */
export function useLtyStakingEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ltyStakingABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof ltyStakingAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, TEventName>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"AdminChanged"`.
 */
export function useLtyStakingAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'AdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'AdminChanged'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"BeaconUpgraded"`.
 */
export function useLtyStakingBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'BeaconUpgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'BeaconUpgraded'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"Initialized"`.
 */
export function useLtyStakingInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'Initialized'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'Initialized'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"OwnershipTransferStarted"`.
 */
export function useLtyStakingOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'OwnershipTransferStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'OwnershipTransferStarted',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'OwnershipTransferStarted'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"OwnershipTransferred"`.
 */
export function useLtyStakingOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'OwnershipTransferred'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"Paused"`.
 */
export function useLtyStakingPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'Paused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'Paused'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"Unpaused"`.
 */
export function useLtyStakingUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'Unpaused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'Unpaused'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link ltyStakingABI}** and `eventName` set to
 * `"Upgraded"`.
 */
export function useLtyStakingUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof ltyStakingABI, 'Upgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ltyStakingAddress } = {} as any,
) {
  return useContractEvent({
    abi: ltyStakingABI,
    address: ltyStakingAddress[31337],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof ltyStakingABI, 'Upgraded'>)
}

/** Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}**. */
export function useLTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"allowance"`.
 */
export function useLTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"balanceOf"`.
 */
export function useLTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"decimals"`.
 */
export function useLTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"getExpectedRetained"`.
 */
export function useLTokenGetExpectedRetained<
  TFunctionName extends 'getExpectedRetained',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'getExpectedRetained',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"invested"`.
 */
export function useLTokenInvested<
  TFunctionName extends 'invested',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'invested',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"name"`.
 */
export function useLTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"owner"`.
 */
export function useLTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"paused"`.
 */
export function useLTokenPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"pendingOwner"`.
 */
export function useLTokenPendingOwner<
  TFunctionName extends 'pendingOwner',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"proxiableUUID"`.
 */
export function useLTokenProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"realBalanceOf"`.
 */
export function useLTokenRealBalanceOf<
  TFunctionName extends 'realBalanceOf',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'realBalanceOf',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"symbol"`.
 */
export function useLTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"totalSupply"`.
 */
export function useLTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps **{@link useContractRead}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"underlying"`.
 */
export function useLTokenUnderlying<
  TFunctionName extends 'underlying',
  TSelectData = ReadContractResult<typeof lTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractRead({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'underlying',
    ...config,
  } as UseContractReadConfig<typeof lTokenABI, TFunctionName, TSelectData>)
}

/** Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}**. */
export function useLTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof lTokenABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, TFunctionName, TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"acceptOwnership"`.
 */
export function useLTokenAcceptOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'acceptOwnership'>['request']['abi'],
        'acceptOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<typeof lTokenABI, 'acceptOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'acceptOwnership', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"approve"`.
 */
export function useLTokenApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof lTokenABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'approve', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"batchQueuedWithdraw"`.
 */
export function useLTokenBatchQueuedWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'batchQueuedWithdraw'>['request']['abi'],
        'batchQueuedWithdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'batchQueuedWithdraw' }
    : UseContractWriteConfig<typeof lTokenABI, 'batchQueuedWithdraw', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchQueuedWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'batchQueuedWithdraw', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'batchQueuedWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"bigQueuedWithdraw"`.
 */
export function useLTokenBigQueuedWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'bigQueuedWithdraw'>['request']['abi'],
        'bigQueuedWithdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'bigQueuedWithdraw' }
    : UseContractWriteConfig<typeof lTokenABI, 'bigQueuedWithdraw', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'bigQueuedWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'bigQueuedWithdraw', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'bigQueuedWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"cancelWithdrawalRequest"`.
 */
export function useLTokenCancelWithdrawalRequest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'cancelWithdrawalRequest'>['request']['abi'],
        'cancelWithdrawalRequest',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'cancelWithdrawalRequest' }
    : UseContractWriteConfig<typeof lTokenABI, 'cancelWithdrawalRequest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelWithdrawalRequest'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'cancelWithdrawalRequest', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'cancelWithdrawalRequest',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"claimFees"`.
 */
export function useLTokenClaimFees<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'claimFees'>['request']['abi'],
        'claimFees',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'claimFees' }
    : UseContractWriteConfig<typeof lTokenABI, 'claimFees', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'claimFees'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'claimFees', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'claimFees',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"decreaseAllowance"`.
 */
export function useLTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof lTokenABI, 'decreaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'decreaseAllowance', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"deposit"`.
 */
export function useLTokenDeposit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'deposit' }
    : UseContractWriteConfig<typeof lTokenABI, 'deposit', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'deposit', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"depositFor"`.
 */
export function useLTokenDepositFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'depositFor'>['request']['abi'],
        'depositFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'depositFor' }
    : UseContractWriteConfig<typeof lTokenABI, 'depositFor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositFor'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'depositFor', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'depositFor',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"fundContract"`.
 */
export function useLTokenFundContract<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'fundContract'>['request']['abi'],
        'fundContract',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'fundContract' }
    : UseContractWriteConfig<typeof lTokenABI, 'fundContract', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'fundContract'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'fundContract', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'fundContract',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"increaseAllowance"`.
 */
export function useLTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof lTokenABI, 'increaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'increaseAllowance', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"initialize"`.
 */
export function useLTokenInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<typeof lTokenABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'initialize', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"instantWithdraw"`.
 */
export function useLTokenInstantWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'instantWithdraw'>['request']['abi'],
        'instantWithdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'instantWithdraw' }
    : UseContractWriteConfig<typeof lTokenABI, 'instantWithdraw', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'instantWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'instantWithdraw', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'instantWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"pause"`.
 */
export function useLTokenPause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pause' }
    : UseContractWriteConfig<typeof lTokenABI, 'pause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'pause', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"recoverERC20"`.
 */
export function useLTokenRecoverErc20<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'recoverERC20'>['request']['abi'],
        'recoverERC20',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'recoverERC20' }
    : UseContractWriteConfig<typeof lTokenABI, 'recoverERC20', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recoverERC20'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'recoverERC20', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'recoverERC20',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"recoverUnderlying"`.
 */
export function useLTokenRecoverUnderlying<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'recoverUnderlying'>['request']['abi'],
        'recoverUnderlying',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'recoverUnderlying' }
    : UseContractWriteConfig<typeof lTokenABI, 'recoverUnderlying', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recoverUnderlying'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'recoverUnderlying', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'recoverUnderlying',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"renounceOwnership"`.
 */
export function useLTokenRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof lTokenABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'renounceOwnership', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"requestWithdrawal"`.
 */
export function useLTokenRequestWithdrawal<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'requestWithdrawal'>['request']['abi'],
        'requestWithdrawal',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'requestWithdrawal' }
    : UseContractWriteConfig<typeof lTokenABI, 'requestWithdrawal', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'requestWithdrawal'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'requestWithdrawal', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'requestWithdrawal',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setAPR"`.
 */
export function useLTokenSetApr<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setAPR'>['request']['abi'],
        'setAPR',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAPR' }
    : UseContractWriteConfig<typeof lTokenABI, 'setAPR', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAPR'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setAPR', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setAPR',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setBlacklist"`.
 */
export function useLTokenSetBlacklist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setBlacklist'>['request']['abi'],
        'setBlacklist',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setBlacklist' }
    : UseContractWriteConfig<typeof lTokenABI, 'setBlacklist', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setBlacklist'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setBlacklist', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setBlacklist',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setFeesRate"`.
 */
export function useLTokenSetFeesRate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setFeesRate'>['request']['abi'],
        'setFeesRate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFeesRate' }
    : UseContractWriteConfig<typeof lTokenABI, 'setFeesRate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeesRate'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setFeesRate', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setFeesRate',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setFund"`.
 */
export function useLTokenSetFund<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setFund'>['request']['abi'],
        'setFund',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFund' }
    : UseContractWriteConfig<typeof lTokenABI, 'setFund', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFund'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setFund', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setFund',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setLTYStaking"`.
 */
export function useLTokenSetLtyStaking<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setLTYStaking'>['request']['abi'],
        'setLTYStaking',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setLTYStaking' }
    : UseContractWriteConfig<typeof lTokenABI, 'setLTYStaking', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setLTYStaking'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setLTYStaking', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setLTYStaking',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setRetentionRate"`.
 */
export function useLTokenSetRetentionRate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setRetentionRate'>['request']['abi'],
        'setRetentionRate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setRetentionRate' }
    : UseContractWriteConfig<typeof lTokenABI, 'setRetentionRate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setRetentionRate'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setRetentionRate', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setRetentionRate',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"setWithdrawer"`.
 */
export function useLTokenSetWithdrawer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'setWithdrawer'>['request']['abi'],
        'setWithdrawer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setWithdrawer' }
    : UseContractWriteConfig<typeof lTokenABI, 'setWithdrawer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setWithdrawer'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'setWithdrawer', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setWithdrawer',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"transfer"`.
 */
export function useLTokenTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<typeof lTokenABI, 'transfer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'transfer', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"transferFrom"`.
 */
export function useLTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof lTokenABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'transferFrom', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"transferOwnership"`.
 */
export function useLTokenTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof lTokenABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'transferOwnership', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"unpause"`.
 */
export function useLTokenUnpause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unpause' }
    : UseContractWriteConfig<typeof lTokenABI, 'unpause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'unpause', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"upgradeTo"`.
 */
export function useLTokenUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'upgradeTo'>['request']['abi'],
        'upgradeTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof lTokenABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'upgradeTo', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"upgradeToAndCall"`.
 */
export function useLTokenUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof lTokenABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'upgradeToAndCall', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps **{@link useContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set to
 * `"withdrawTo"`.
 */
export function useLTokenWithdrawTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof lTokenAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lTokenABI, 'withdrawTo'>['request']['abi'],
        'withdrawTo',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdrawTo' }
    : UseContractWriteConfig<typeof lTokenABI, 'withdrawTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<typeof lTokenABI, 'withdrawTo', TMode>({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/** Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}**. */
export function usePrepareLTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof lTokenABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, TFunctionName>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"acceptOwnership"`.
 */
export function usePrepareLTokenAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'acceptOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'acceptOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"approve"`.
 */
export function usePrepareLTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'approve'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"batchQueuedWithdraw"`.
 */
export function usePrepareLTokenBatchQueuedWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'batchQueuedWithdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'batchQueuedWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'batchQueuedWithdraw'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"bigQueuedWithdraw"`.
 */
export function usePrepareLTokenBigQueuedWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'bigQueuedWithdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'bigQueuedWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'bigQueuedWithdraw'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"cancelWithdrawalRequest"`.
 */
export function usePrepareLTokenCancelWithdrawalRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'cancelWithdrawalRequest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'cancelWithdrawalRequest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'cancelWithdrawalRequest'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"claimFees"`.
 */
export function usePrepareLTokenClaimFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'claimFees'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'claimFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'claimFees'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"decreaseAllowance"`.
 */
export function usePrepareLTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'decreaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"deposit"`.
 */
export function usePrepareLTokenDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'deposit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'deposit'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"depositFor"`.
 */
export function usePrepareLTokenDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'depositFor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'depositFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'depositFor'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"fundContract"`.
 */
export function usePrepareLTokenFundContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'fundContract'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'fundContract',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'fundContract'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"increaseAllowance"`.
 */
export function usePrepareLTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'increaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"initialize"`.
 */
export function usePrepareLTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'initialize'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"instantWithdraw"`.
 */
export function usePrepareLTokenInstantWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'instantWithdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'instantWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'instantWithdraw'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"pause"`.
 */
export function usePrepareLTokenPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'pause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'pause'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"recoverERC20"`.
 */
export function usePrepareLTokenRecoverErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'recoverERC20'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'recoverERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'recoverERC20'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"recoverUnderlying"`.
 */
export function usePrepareLTokenRecoverUnderlying(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'recoverUnderlying'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'recoverUnderlying',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'recoverUnderlying'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"renounceOwnership"`.
 */
export function usePrepareLTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'renounceOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"requestWithdrawal"`.
 */
export function usePrepareLTokenRequestWithdrawal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'requestWithdrawal'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'requestWithdrawal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'requestWithdrawal'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setAPR"`.
 */
export function usePrepareLTokenSetApr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setAPR'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setAPR',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setAPR'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setBlacklist"`.
 */
export function usePrepareLTokenSetBlacklist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setBlacklist'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setBlacklist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setBlacklist'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setFeesRate"`.
 */
export function usePrepareLTokenSetFeesRate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setFeesRate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setFeesRate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setFeesRate'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setFund"`.
 */
export function usePrepareLTokenSetFund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setFund'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setFund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setFund'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setLTYStaking"`.
 */
export function usePrepareLTokenSetLtyStaking(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setLTYStaking'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setLTYStaking',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setLTYStaking'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setRetentionRate"`.
 */
export function usePrepareLTokenSetRetentionRate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setRetentionRate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setRetentionRate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setRetentionRate'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"setWithdrawer"`.
 */
export function usePrepareLTokenSetWithdrawer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'setWithdrawer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'setWithdrawer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'setWithdrawer'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"transfer"`.
 */
export function usePrepareLTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'transfer'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"transferFrom"`.
 */
export function usePrepareLTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'transferFrom'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"transferOwnership"`.
 */
export function usePrepareLTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'transferOwnership'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"unpause"`.
 */
export function usePrepareLTokenUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'unpause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'unpause'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"upgradeTo"`.
 */
export function usePrepareLTokenUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'upgradeTo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'upgradeTo'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"upgradeToAndCall"`.
 */
export function usePrepareLTokenUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'upgradeToAndCall'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'upgradeToAndCall'>)
}

/**
 * Wraps **{@link usePrepareContractWrite}** with `abi` set to **{@link lTokenABI}** and `functionName` set
 * to `"withdrawTo"`.
 */
export function usePrepareLTokenWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lTokenABI, 'withdrawTo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lTokenABI, 'withdrawTo'>)
}

/** Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}**. */
export function useLTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof lTokenABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, TEventName>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"AdminChanged"`.
 */
export function useLTokenAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'AdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'AdminChanged'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"Approval"`.
 */
export function useLTokenApprovalEvent(
  config: Omit<UseContractEventConfig<typeof lTokenABI, 'Approval'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'Approval'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"BeaconUpgraded"`.
 */
export function useLTokenBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'BeaconUpgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'BeaconUpgraded'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"Initialized"`.
 */
export function useLTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'Initialized'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'Initialized'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"OwnershipTransferStarted"`.
 */
export function useLTokenOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'OwnershipTransferStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'OwnershipTransferStarted',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'OwnershipTransferStarted'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"OwnershipTransferred"`.
 */
export function useLTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"Paused"`.
 */
export function useLTokenPausedEvent(
  config: Omit<UseContractEventConfig<typeof lTokenABI, 'Paused'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'Paused'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"Transfer"`.
 */
export function useLTokenTransferEvent(
  config: Omit<UseContractEventConfig<typeof lTokenABI, 'Transfer'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'Transfer'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"Unpaused"`.
 */
export function useLTokenUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof lTokenABI, 'Unpaused'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'Unpaused'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"Upgraded"`.
 */
export function useLTokenUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof lTokenABI, 'Upgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof lTokenAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'Upgraded'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"addedQueuedWithdrawalRequest"`.
 */
export function useLTokenAddedQueuedWithdrawalRequestEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'addedQueuedWithdrawalRequest'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'addedQueuedWithdrawalRequest',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'addedQueuedWithdrawalRequest'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"balanceMutation"`.
 */
export function useLTokenBalanceMutationEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'balanceMutation'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'balanceMutation',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'balanceMutation'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"cancelledQueuedWithdrawalRequest"`.
 */
export function useLTokenCancelledQueuedWithdrawalRequestEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'cancelledQueuedWithdrawalRequest'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'cancelledQueuedWithdrawalRequest',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'cancelledQueuedWithdrawalRequest'>)
}

/**
 * Wraps **{@link useContractEvent}** with `abi` set to **{@link lTokenABI}** and `eventName` set to
 * `"proceededQueuedWithdrawalRequests"`.
 */
export function useLTokenProceededQueuedWithdrawalRequestsEvent(
  config: Omit<
    UseContractEventConfig<typeof lTokenABI, 'proceededQueuedWithdrawalRequests'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lTokenAddress } = {} as any,
) {
  return useContractEvent({
    abi: lTokenABI,
    address: lTokenAddress[31337],
    eventName: 'proceededQueuedWithdrawalRequests',
    ...config,
  } as UseContractEventConfig<typeof lTokenABI, 'proceededQueuedWithdrawalRequests'>)
}
