schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type APRUpdate {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  apr: BigDecimal!
}

input APRUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [APRUpdate_filter]
  or: [APRUpdate_filter]
}

enum APRUpdate_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__totalMintedRewards
  timestamp
  apr
}

type Activity {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  account: Bytes!
  action: ActivityAction!
  amount: BigDecimal!
  status: ActivityStatus!
}

enum ActivityAction {
  WITHDRAW
  DEPOSIT
}

enum ActivityStatus {
  SUCCESS
  CANCELLED
  QUEUED
}

input Activity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  action: ActivityAction
  action_not: ActivityAction
  action_in: [ActivityAction!]
  action_not_in: [ActivityAction!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  status: ActivityStatus
  status_not: ActivityStatus
  status_in: [ActivityStatus!]
  status_not_in: [ActivityStatus!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Activity_filter]
  or: [Activity_filter]
}

enum Activity_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__totalMintedRewards
  timestamp
  account
  action
  amount
  status
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type LDYStaking {
  id: ID!
  totalStakedUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalStakedUpdate_orderBy
    orderDirection: OrderDirection
    where: TotalStakedUpdate_filter
  ): [TotalStakedUpdate!]
}

input LDYStaking_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalStakedUpdates_: TotalStakedUpdate_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [LDYStaking_filter]
  or: [LDYStaking_filter]
}

enum LDYStaking_orderBy {
  id
  totalStakedUpdates
}

type LToken {
  id: ID!
  tvlUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TVLUpdate_orderBy
    orderDirection: OrderDirection
    where: TVLUpdate_filter
  ): [TVLUpdate!]
  aprUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: APRUpdate_orderBy
    orderDirection: OrderDirection
    where: APRUpdate_filter
  ): [APRUpdate!]
  activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
  ): [Activity!]
  rewardsMints(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsMint_orderBy
    orderDirection: OrderDirection
    where: RewardsMint_filter
  ): [RewardsMint!]
  totalMintedRewards: BigDecimal!
}

input LToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tvlUpdates_: TVLUpdate_filter
  aprUpdates_: APRUpdate_filter
  activities_: Activity_filter
  rewardsMints_: RewardsMint_filter
  totalMintedRewards: BigDecimal
  totalMintedRewards_not: BigDecimal
  totalMintedRewards_gt: BigDecimal
  totalMintedRewards_lt: BigDecimal
  totalMintedRewards_gte: BigDecimal
  totalMintedRewards_lte: BigDecimal
  totalMintedRewards_in: [BigDecimal!]
  totalMintedRewards_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [LToken_filter]
  or: [LToken_filter]
}

enum LToken_orderBy {
  id
  tvlUpdates
  aprUpdates
  activities
  rewardsMints
  totalMintedRewards
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type Query {
  ltoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LToken
  ltokens(
    skip: Int = 0
    first: Int = 100
    orderBy: LToken_orderBy
    orderDirection: OrderDirection
    where: LToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LToken!]!
  tvlupdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TVLUpdate
  tvlupdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TVLUpdate_orderBy
    orderDirection: OrderDirection
    where: TVLUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TVLUpdate!]!
  aprupdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): APRUpdate
  aprupdates(
    skip: Int = 0
    first: Int = 100
    orderBy: APRUpdate_orderBy
    orderDirection: OrderDirection
    where: APRUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [APRUpdate!]!
  activity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Activity
  activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Activity!]!
  rewardsMint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardsMint
  rewardsMints(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsMint_orderBy
    orderDirection: OrderDirection
    where: RewardsMint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardsMint!]!
  ldystaking(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LDYStaking
  ldystakings(
    skip: Int = 0
    first: Int = 100
    orderBy: LDYStaking_orderBy
    orderDirection: OrderDirection
    where: LDYStaking_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LDYStaking!]!
  totalStakedUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TotalStakedUpdate
  totalStakedUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalStakedUpdate_orderBy
    orderDirection: OrderDirection
    where: TotalStakedUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TotalStakedUpdate!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type RewardsMint {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  account: Bytes!
  balanceBefore: BigDecimal!
  revenue: BigDecimal!
  growth: BigDecimal!
}

input RewardsMint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  balanceBefore: BigDecimal
  balanceBefore_not: BigDecimal
  balanceBefore_gt: BigDecimal
  balanceBefore_lt: BigDecimal
  balanceBefore_gte: BigDecimal
  balanceBefore_lte: BigDecimal
  balanceBefore_in: [BigDecimal!]
  balanceBefore_not_in: [BigDecimal!]
  revenue: BigDecimal
  revenue_not: BigDecimal
  revenue_gt: BigDecimal
  revenue_lt: BigDecimal
  revenue_gte: BigDecimal
  revenue_lte: BigDecimal
  revenue_in: [BigDecimal!]
  revenue_not_in: [BigDecimal!]
  growth: BigDecimal
  growth_not: BigDecimal
  growth_gt: BigDecimal
  growth_lt: BigDecimal
  growth_gte: BigDecimal
  growth_lte: BigDecimal
  growth_in: [BigDecimal!]
  growth_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [RewardsMint_filter]
  or: [RewardsMint_filter]
}

enum RewardsMint_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__totalMintedRewards
  timestamp
  account
  balanceBefore
  revenue
  growth
}

type Subscription {
  ltoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LToken
  ltokens(
    skip: Int = 0
    first: Int = 100
    orderBy: LToken_orderBy
    orderDirection: OrderDirection
    where: LToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LToken!]!
  tvlupdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TVLUpdate
  tvlupdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TVLUpdate_orderBy
    orderDirection: OrderDirection
    where: TVLUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TVLUpdate!]!
  aprupdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): APRUpdate
  aprupdates(
    skip: Int = 0
    first: Int = 100
    orderBy: APRUpdate_orderBy
    orderDirection: OrderDirection
    where: APRUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [APRUpdate!]!
  activity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Activity
  activities(
    skip: Int = 0
    first: Int = 100
    orderBy: Activity_orderBy
    orderDirection: OrderDirection
    where: Activity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Activity!]!
  rewardsMint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardsMint
  rewardsMints(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsMint_orderBy
    orderDirection: OrderDirection
    where: RewardsMint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardsMint!]!
  ldystaking(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LDYStaking
  ldystakings(
    skip: Int = 0
    first: Int = 100
    orderBy: LDYStaking_orderBy
    orderDirection: OrderDirection
    where: LDYStaking_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LDYStaking!]!
  totalStakedUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TotalStakedUpdate
  totalStakedUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalStakedUpdate_orderBy
    orderDirection: OrderDirection
    where: TotalStakedUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TotalStakedUpdate!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type TVLUpdate {
  id: ID!
  ltoken: LToken!
  timestamp: BigInt!
  amount: BigDecimal!
}

input TVLUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltoken: String
  ltoken_not: String
  ltoken_gt: String
  ltoken_lt: String
  ltoken_gte: String
  ltoken_lte: String
  ltoken_in: [String!]
  ltoken_not_in: [String!]
  ltoken_contains: String
  ltoken_contains_nocase: String
  ltoken_not_contains: String
  ltoken_not_contains_nocase: String
  ltoken_starts_with: String
  ltoken_starts_with_nocase: String
  ltoken_not_starts_with: String
  ltoken_not_starts_with_nocase: String
  ltoken_ends_with: String
  ltoken_ends_with_nocase: String
  ltoken_not_ends_with: String
  ltoken_not_ends_with_nocase: String
  ltoken_: LToken_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [TVLUpdate_filter]
  or: [TVLUpdate_filter]
}

enum TVLUpdate_orderBy {
  id
  ltoken
  ltoken__id
  ltoken__totalMintedRewards
  timestamp
  amount
}

type TotalStakedUpdate {
  id: ID!
  staking: LDYStaking!
  timestamp: BigInt!
  amount: BigDecimal!
}

input TotalStakedUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  staking: String
  staking_not: String
  staking_gt: String
  staking_lt: String
  staking_gte: String
  staking_lte: String
  staking_in: [String!]
  staking_not_in: [String!]
  staking_contains: String
  staking_contains_nocase: String
  staking_not_contains: String
  staking_not_contains_nocase: String
  staking_starts_with: String
  staking_starts_with_nocase: String
  staking_not_starts_with: String
  staking_not_starts_with_nocase: String
  staking_ends_with: String
  staking_ends_with_nocase: String
  staking_not_ends_with: String
  staking_not_ends_with_nocase: String
  staking_: LDYStaking_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [TotalStakedUpdate_filter]
  or: [TotalStakedUpdate_filter]
}

enum TotalStakedUpdate_orderBy {
  id
  staking
  staking__id
  timestamp
  amount
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes
  """
  The block number
  """
  number: Int!
  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  """
  The deployment ID
  """
  deployment: String!
  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
