// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class APRUpdateEvent extends ethereum.Event {
  get params(): APRUpdateEvent__Params {
    return new APRUpdateEvent__Params(this);
  }
}

export class APRUpdateEvent__Params {
  _event: APRUpdateEvent;

  constructor(event: APRUpdateEvent) {
    this._event = event;
  }

  get newAPR(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TotalStakedUpdateEvent extends ethereum.Event {
  get params(): TotalStakedUpdateEvent__Params {
    return new TotalStakedUpdateEvent__Params(this);
  }
}

export class TotalStakedUpdateEvent__Params {
  _event: TotalStakedUpdateEvent;

  constructor(event: TotalStakedUpdateEvent) {
    this._event = event;
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LTYStaking__accountsStakesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getLockEnd(): BigInt {
    return this.value1;
  }
}

export class LTYStaking extends ethereum.SmartContract {
  static bind(address: Address): LTYStaking {
    return new LTYStaking("LTYStaking", address);
  }

  accountsStakes(param0: Address): LTYStaking__accountsStakesResult {
    let result = super.call(
      "accountsStakes",
      "accountsStakes(address):(uint216,uint40)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new LTYStaking__accountsStakesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_accountsStakes(
    param0: Address
  ): ethereum.CallResult<LTYStaking__accountsStakesResult> {
    let result = super.tryCall(
      "accountsStakes",
      "accountsStakes(address):(uint216,uint40)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LTYStaking__accountsStakesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getApr(): i32 {
    let result = super.call("getApr", "getApr():(uint16)", []);

    return result[0].toI32();
  }

  try_getApr(): ethereum.CallResult<i32> {
    let result = super.tryCall("getApr", "getApr():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getLockEndIncrease(account: Address, addedAmount: BigInt): BigInt {
    let result = super.call(
      "getLockEndIncrease",
      "getLockEndIncrease(address,uint256):(uint40)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(addedAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLockEndIncrease(
    account: Address,
    addedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockEndIncrease",
      "getLockEndIncrease(address,uint256):(uint40)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(addedAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTier(tier: BigInt): BigInt {
    let result = super.call("getTier", "getTier(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tier)
    ]);

    return result[0].toBigInt();
  }

  try_getTier(tier: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTier", "getTier(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tier)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalBlacklist(): Address {
    let result = super.call(
      "globalBlacklist",
      "globalBlacklist():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_globalBlacklist(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "globalBlacklist",
      "globalBlacklist():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalOwner(): Address {
    let result = super.call("globalOwner", "globalOwner():(address)", []);

    return result[0].toAddress();
  }

  try_globalOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalOwner", "globalOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalPauser(): Address {
    let result = super.call("globalPauser", "globalPauser():(address)", []);

    return result[0].toAddress();
  }

  try_globalPauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalPauser", "globalPauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  invested(): Address {
    let result = super.call("invested", "invested():(address)", []);

    return result[0].toAddress();
  }

  try_invested(): ethereum.CallResult<Address> {
    let result = super.tryCall("invested", "invested():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockEndOf(account: Address): BigInt {
    let result = super.call("lockEndOf", "lockEndOf(address):(uint40)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_lockEndOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockEndOf", "lockEndOf(address):(uint40)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewardsOf(account: Address): BigInt {
    let result = super.call("rewardsOf", "rewardsOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_rewardsOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardsOf", "rewardsOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeLockDuration(): BigInt {
    let result = super.call(
      "stakeLockDuration",
      "stakeLockDuration():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakeLockDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeLockDuration",
      "stakeLockDuration():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeOf(account: Address): BigInt {
    let result = super.call("stakeOf", "stakeOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_stakeOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeOf", "stakeOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tierOf(account: Address): BigInt {
    let result = super.call("tierOf", "tierOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_tierOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tierOf", "tierOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlockFeesRateUD3(): BigInt {
    let result = super.call(
      "unlockFeesRateUD3",
      "unlockFeesRateUD3():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_unlockFeesRateUD3(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockFeesRateUD3",
      "unlockFeesRateUD3():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CompoundCall extends ethereum.Call {
  get inputs(): CompoundCall__Inputs {
    return new CompoundCall__Inputs(this);
  }

  get outputs(): CompoundCall__Outputs {
    return new CompoundCall__Outputs(this);
  }
}

export class CompoundCall__Inputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class CompoundCall__Outputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _globalOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RecoverLTYCall extends ethereum.Call {
  get inputs(): RecoverLTYCall__Inputs {
    return new RecoverLTYCall__Inputs(this);
  }

  get outputs(): RecoverLTYCall__Outputs {
    return new RecoverLTYCall__Outputs(this);
  }
}

export class RecoverLTYCall__Inputs {
  _call: RecoverLTYCall;

  constructor(call: RecoverLTYCall) {
    this._call = call;
  }
}

export class RecoverLTYCall__Outputs {
  _call: RecoverLTYCall;

  constructor(call: RecoverLTYCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAPRCall extends ethereum.Call {
  get inputs(): SetAPRCall__Inputs {
    return new SetAPRCall__Inputs(this);
  }

  get outputs(): SetAPRCall__Outputs {
    return new SetAPRCall__Outputs(this);
  }
}

export class SetAPRCall__Inputs {
  _call: SetAPRCall;

  constructor(call: SetAPRCall) {
    this._call = call;
  }

  get aprUD3(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetAPRCall__Outputs {
  _call: SetAPRCall;

  constructor(call: SetAPRCall) {
    this._call = call;
  }
}

export class SetGlobalBlacklistCall extends ethereum.Call {
  get inputs(): SetGlobalBlacklistCall__Inputs {
    return new SetGlobalBlacklistCall__Inputs(this);
  }

  get outputs(): SetGlobalBlacklistCall__Outputs {
    return new SetGlobalBlacklistCall__Outputs(this);
  }
}

export class SetGlobalBlacklistCall__Inputs {
  _call: SetGlobalBlacklistCall;

  constructor(call: SetGlobalBlacklistCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalBlacklistCall__Outputs {
  _call: SetGlobalBlacklistCall;

  constructor(call: SetGlobalBlacklistCall) {
    this._call = call;
  }
}

export class SetGlobalOwnerCall extends ethereum.Call {
  get inputs(): SetGlobalOwnerCall__Inputs {
    return new SetGlobalOwnerCall__Inputs(this);
  }

  get outputs(): SetGlobalOwnerCall__Outputs {
    return new SetGlobalOwnerCall__Outputs(this);
  }
}

export class SetGlobalOwnerCall__Inputs {
  _call: SetGlobalOwnerCall;

  constructor(call: SetGlobalOwnerCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalOwnerCall__Outputs {
  _call: SetGlobalOwnerCall;

  constructor(call: SetGlobalOwnerCall) {
    this._call = call;
  }
}

export class SetGlobalPauserCall extends ethereum.Call {
  get inputs(): SetGlobalPauserCall__Inputs {
    return new SetGlobalPauserCall__Inputs(this);
  }

  get outputs(): SetGlobalPauserCall__Outputs {
    return new SetGlobalPauserCall__Outputs(this);
  }
}

export class SetGlobalPauserCall__Inputs {
  _call: SetGlobalPauserCall;

  constructor(call: SetGlobalPauserCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalPauserCall__Outputs {
  _call: SetGlobalPauserCall;

  constructor(call: SetGlobalPauserCall) {
    this._call = call;
  }
}

export class SetInvestedCall extends ethereum.Call {
  get inputs(): SetInvestedCall__Inputs {
    return new SetInvestedCall__Inputs(this);
  }

  get outputs(): SetInvestedCall__Outputs {
    return new SetInvestedCall__Outputs(this);
  }
}

export class SetInvestedCall__Inputs {
  _call: SetInvestedCall;

  constructor(call: SetInvestedCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInvestedCall__Outputs {
  _call: SetInvestedCall;

  constructor(call: SetInvestedCall) {
    this._call = call;
  }
}

export class SetStakeLockDurationCall extends ethereum.Call {
  get inputs(): SetStakeLockDurationCall__Inputs {
    return new SetStakeLockDurationCall__Inputs(this);
  }

  get outputs(): SetStakeLockDurationCall__Outputs {
    return new SetStakeLockDurationCall__Outputs(this);
  }
}

export class SetStakeLockDurationCall__Inputs {
  _call: SetStakeLockDurationCall;

  constructor(call: SetStakeLockDurationCall) {
    this._call = call;
  }

  get _stakeLockDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStakeLockDurationCall__Outputs {
  _call: SetStakeLockDurationCall;

  constructor(call: SetStakeLockDurationCall) {
    this._call = call;
  }
}

export class SetTierCall extends ethereum.Call {
  get inputs(): SetTierCall__Inputs {
    return new SetTierCall__Inputs(this);
  }

  get outputs(): SetTierCall__Outputs {
    return new SetTierCall__Outputs(this);
  }
}

export class SetTierCall__Inputs {
  _call: SetTierCall;

  constructor(call: SetTierCall) {
    this._call = call;
  }

  get tier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountUD18(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTierCall__Outputs {
  _call: SetTierCall;

  constructor(call: SetTierCall) {
    this._call = call;
  }
}

export class SetUnlockFeesRateCall extends ethereum.Call {
  get inputs(): SetUnlockFeesRateCall__Inputs {
    return new SetUnlockFeesRateCall__Inputs(this);
  }

  get outputs(): SetUnlockFeesRateCall__Outputs {
    return new SetUnlockFeesRateCall__Outputs(this);
  }
}

export class SetUnlockFeesRateCall__Inputs {
  _call: SetUnlockFeesRateCall;

  constructor(call: SetUnlockFeesRateCall) {
    this._call = call;
  }

  get _unlockFeesRateUD3(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUnlockFeesRateCall__Outputs {
  _call: SetUnlockFeesRateCall;

  constructor(call: SetUnlockFeesRateCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
